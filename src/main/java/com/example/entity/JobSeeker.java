package com.example.entity;

import java.util.List;

import com.example.entity.profile.Education;
import com.example.entity.profile.Experience;
import com.example.entity.profile.JobPreferences;
import com.example.entity.profile.JobSeekerPersonalInfo;
import com.example.entity.profile.SocialProfile;

import jakarta.persistence.CascadeType;
import jakarta.persistence.ElementCollection;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;
import jakarta.persistence.OneToOne;
import jakarta.persistence.Table;
import jakarta.persistence.Transient;

/**
 * Entity class representing a Job Seeker in the system.
 * Maps to the "JobSeeker" table in the database.
 */
@Entity
@Table(name = "JobSeeker")
public class JobSeeker {
	
	/**
	 * Primary key - Unique identifier for each JobSeeker.
	 * Auto-generated by the database.
	 */
	@Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
	private int id;
	
	/** Full name of the job seeker */
	private String fullName;
	
	
	/** Email address, used as a login identifier */
	private String email;
	
	/** Mobile phone number */
	private String mobileNumber;
	
	/** Password for authentication */
	private String password;

	/**
	 * Confirm password field used for validation during registration/update.
	 * Marked as @Transient to avoid persistence in the database.
	 */
	@Transient
	private String confirmPassword;
	
	
	
	// personalInfo
	@OneToOne(mappedBy = "jobSeeker" ,cascade = CascadeType.ALL, orphanRemoval = true)
	private JobSeekerPersonalInfo personalInfo;
	
	//education
	@OneToMany(mappedBy = "jobSeeker" ,cascade = CascadeType.ALL, orphanRemoval = true)
	private List<Education> educationList;
	
	// experience
	@OneToMany(mappedBy = "jobSeeker" ,cascade = CascadeType.ALL, orphanRemoval = true)
	private List<Experience> experienceList;
	
	//skills
	@ElementCollection
	private List<String> skills;
	
	//social profile
	@OneToOne(mappedBy = "jobSeeker" , cascade = CascadeType.ALL, orphanRemoval = true)
	private SocialProfile socialProfile;
	
	//jobpreference
	@OneToOne(mappedBy = "jobSeeker" ,cascade = CascadeType.ALL, orphanRemoval = true)
	private JobPreferences jobPrefeences;
	
	

	public JobSeeker() {
		super();
		// TODO Auto-generated constructor stub
	}



	public JobSeeker(int id, String fullName, String email, String mobileNumber, String password,
			String confirmPassword, JobSeekerPersonalInfo personalInfo, List<Education> educationList,
			List<Experience> experienceList, List<String> skills, SocialProfile socialProfile,
			JobPreferences jobPrefeences) {
		super();
		this.id = id;
		this.fullName = fullName;
		this.email = email;
		this.mobileNumber = mobileNumber;
		this.password = password;
		this.confirmPassword = confirmPassword;
		this.personalInfo = personalInfo;
		this.educationList = educationList;
		this.experienceList = experienceList;
		this.skills = skills;
		this.socialProfile = socialProfile;
		this.jobPrefeences = jobPrefeences;
	}



	public int getId() {
		return id;
	}



	public void setId(int id) {
		this.id = id;
	}



	public String getFullName() {
		return fullName;
	}



	public void setFullName(String fullName) {
		this.fullName = fullName;
	}



	public String getEmail() {
		return email;
	}



	public void setEmail(String email) {
		this.email = email;
	}



	public String getMobileNumber() {
		return mobileNumber;
	}



	public void setMobileNumber(String mobileNumber) {
		this.mobileNumber = mobileNumber;
	}



	public String getPassword() {
		return password;
	}



	public void setPassword(String password) {
		this.password = password;
	}



	public String getConfirmPassword() {
		return confirmPassword;
	}



	public void setConfirmPassword(String confirmPassword) {
		this.confirmPassword = confirmPassword;
	}



	public JobSeekerPersonalInfo getPersonalInfo() {
		return personalInfo;
	}



	public void setPersonalInfo(JobSeekerPersonalInfo personalInfo) {
		this.personalInfo = personalInfo;
	}



	public List<Education> getEducationList() {
		return educationList;
	}



	public void setEducationList(List<Education> educationList) {
		this.educationList = educationList;
	}



	public List<Experience> getExperienceList() {
		return experienceList;
	}



	public void setExperienceList(List<Experience> experienceList) {
		this.experienceList = experienceList;
	}



	public List<String> getSkills() {
		return skills;
	}



	public void setSkills(List<String> skills) {
		this.skills = skills;
	}



	public SocialProfile getSocialProfile() {
		return socialProfile;
	}



	public void setSocialProfile(SocialProfile socialProfile) {
		this.socialProfile = socialProfile;
	}



	public JobPreferences getJobPrefeences() {
		return jobPrefeences;
	}



	public void setJobPrefeences(JobPreferences jobPrefeences) {
		this.jobPrefeences = jobPrefeences;
	}

	
	
	
	
}
